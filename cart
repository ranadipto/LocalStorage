

import Cart from "./Cart";
const App = () => {
  return (
    <>
      <Cart />
    </>
  );
};
export default App;


//<===========================cart.tsx==============================>
import React, { useState, useEffect } from "react";

// Define the structure of an item in the cart
interface CartItem {
  id: number;
  name: string;
  price: number;
  quantity: number;
}

const Cart: React.FC = () => {
  // Initialize cart state from localStorage or empty array
  const [cart, setCart] = useState<CartItem[]>(() => {
    const savedCart = localStorage.getItem("cart");
    return savedCart ? JSON.parse(savedCart) : [];
  });

  // Save the cart to localStorage whenever it changes
  useEffect(() => {
    localStorage.setItem("cart", JSON.stringify(cart));
  }, [cart]);

  // Add a new item to the cart
  const addToCart = (item: CartItem) => {
    const existingItemIndex = cart.findIndex((i) => i.id === item.id);

    if (existingItemIndex !== -1) {
      // If the item already exists, update the quantity
      const updatedCart = [...cart];
      updatedCart[existingItemIndex].quantity += item.quantity;
      setCart(updatedCart);
    } else {
      // If the item doesn't exist, add it to the cart
      setCart([...cart, item]);
    }
  };

  // Update the quantity of an item in the cart
  const updateQuantity = (id: number, change: number) => {
    const updatedCart = cart
      .map((item) =>
        item.id === id ? { ...item, quantity: item.quantity + change } : item
      )
      .filter((item) => item.quantity > 0); // Ensure no item has 0 or negative quantity

    setCart(updatedCart);
  };

  // Remove an item from the cart
  const removeItem = (id: number) => {
    const updatedCart = cart.filter((item) => item.id !== id);
    setCart(updatedCart);
  };

  return (
    <div className="container mt-5">
      <div className="card p-4">
        <h2 className="text-center mb-4">Shopping Cart</h2>
        <div className="list-group">
          {cart.map((item) => (
            <div
              key={item.id}
              className="list-group-item d-flex justify-content-between align-items-center"
            >
              <div>
                <strong>{item.name}</strong>
                <div>Price: ${item.price}</div>
              </div>
              <div className="d-flex align-items-center">
                <button
                  className="btn btn-warning btn-sm mx-1"
                  onClick={() => updateQuantity(item.id, -1)}
                  disabled={item.quantity <= 1}
                >
                  -
                </button>
                <span>{item.quantity}</span>
                <button
                  className="btn btn-success btn-sm mx-1"
                  onClick={() => updateQuantity(item.id, 1)}
                >
                  +
                </button>
                <button
                  className="btn btn-danger btn-sm mx-1"
                  onClick={() => removeItem(item.id)}
                >
                  Delete
                </button>
              </div>
            </div>
          ))}
        </div>

        <div className="mt-4 d-flex justify-content-between">
          <button
            className="btn btn-primary"
            onClick={() =>
              addToCart({
                id: Date.now(),
                name: "Product A",
                price: 10,
                quantity: 1,
              })
            }
          >
            Add Product A ($10)
          </button>
          <button
            className="btn btn-primary"
            onClick={() =>
              addToCart({
                id: Date.now(),
                name: "Product B",
                price: 20,
                quantity: 1,
              })
            }
          >
            Add Product B ($20)
          </button>
        </div>
      </div>
    </div>
  );
};

export default Cart;
